Description: >

  This template deploys a VPC, 3 pub and private subnets. It deploys an Internet Gateway, with a default 
  route on the public subnets. It deploys a pair of NAT Gateways (one in each
  AZ), and default routes for them in the private subnets.

  It then deploys a highly available ECS cluster using an AutoScaling Group,
  with ECS hosts distributed across multiple Availability Zones.

  3 zones were chosen because every region has at least 3 

Parameters:
  NestedStacksS3Bucket:
    Description: The name of the versioned S3 bucket you created to hold nested stack temlpates
    Type: String
    Default: us-east-1--aws-blueprint.yourdomain.com

  InstanceType:
    Description: Which instance type should we use to build the ECS cluster?
    Type: String
    Default: c5.large

  ClusterSize:
    Description: How many ECS hosts do you want to initially deploy?
    Type: Number
    Default: 0

  VpcCIDR:
    Type: String
    Default: 11.1.0.0/16

  PublicSubnet1CIDR:
    Type: String
    Default: 11.1.32.0/20
  PublicSubnet2CIDR:
    Type: String
    Default: 11.1.96.0/20
  PublicSubnet3CIDR:
    Type: String
    Default: 11.1.160.0/20

  PrivateSubnet1CIDR:
    Type: String
    Default: 11.1.0.0/19
  PrivateSubnet2CIDR:
    Type: String
    Default: 11.1.64.0/19
  PrivateSubnet3CIDR:
    Type: String
    Default: 11.1.128.0/19

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "VPC"
        Parameters:
          - VpcCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PublicSubnet3CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PrivateSubnet3CIDR

Mappings: 
  NestedStacks: 
    infrastructure: 
      "vpc": "vpc/three-sub-nat-gateway.yaml?versionid=724MmqUCXNQ1QbOx_dLTm5K173olP3uw"
      "secgroups": "security-groups/ecs-in-vpc.yaml?versionid=PH.mw2mByzEamzyZqk6NaqGuKQq.L._z"  
      "ecscluster": "ecs/cluster-in-vpc.yaml?versionid=jGkTHl5Fhzh2.IROI9ETiyuYSxnadVmG" 

Resources:
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 
        - https://s3.${AWS::Region}.amazonaws.com/${NestedStacksS3Bucket}/nested-stacks/${url}
        - { url: !FindInMap [NestedStacks, infrastructure, vpc] }

        # https://s3.amazonaws.com/cf.yourdomain.com/infrastructure/vpc.yaml?versionid=WH_GYYQbsoadVDXO9Lqv0vhBWzpV0raw
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        VpcCIDR: !Ref VpcCIDR
        PublicSubnet1CIDR: !Ref PublicSubnet1CIDR
        PublicSubnet2CIDR: !Ref PublicSubnet2CIDR
        PublicSubnet3CIDR: !Ref PublicSubnet3CIDR
        PrivateSubnet1CIDR: !Ref PrivateSubnet1CIDR
        PrivateSubnet2CIDR: !Ref PrivateSubnet2CIDR
        PrivateSubnet3CIDR: !Ref PrivateSubnet3CIDR
  SecurityGroups:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 
        - https://s3.${AWS::Region}.amazonaws.com/${NestedStacksS3Bucket}/nested-stacks/${url}
        - { url: !FindInMap [NestedStacks, infrastructure, secgroups] }

        # https://s3.amazonaws.com/cf.yourdomain.com/infrastructure/security-groups.yaml?versionid=BWH8JIRBkP.LggGolE1d6lqUO1_UnQGt
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        VPC: !GetAtt VPC.Outputs.VPC
  ECS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 
        - https://s3.${AWS::Region}.amazonaws.com/${NestedStacksS3Bucket}/nested-stacks/${url}
        - { url: !FindInMap [NestedStacks, infrastructure, ecscluster] }

        # https://s3.amazonaws.com/cf.yourdomain.com/infrastructure/ecs-cluster.yaml?versionid=a7EedtHDRl1jpwm4IWcjdbacOQeBZuUp
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        InstanceType: !Ref InstanceType
        ClusterSize: !Ref ClusterSize
        VPC: !GetAtt VPC.Outputs.VPC
        SecurityGroup: !GetAtt SecurityGroups.Outputs.ECSHostSecurityGroup
        Subnets: !GetAtt VPC.Outputs.PrivateSubnets

Outputs:
  Version:
    Description: ECS cluster in a VPC
    Value: 1.0.0

  VpcEcsClusterStackName:
    Description: This stack name
    Value: !Ref AWS::StackName